#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Python3)
# 
# Purpose: Full velocity inversion with NIP tomography.
# Velocity model with plane interfaces.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 31/01/2022
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

# Madagascar Package
from rsf.proj import *

# Madagascar Recipes
from rsf.recipes.pefInterpolation2 import pefInterpolation as pef
from rsf.recipes.kimodel import multiLayerModel as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod
from rsf.recipes.kimodel import arr2str

# Main Files
trueModel='trueModel'
stackedSection='stackedSection'
parametersCube='parametersCube'
dataCube='multiLayerDataCube'
interpolatedDataCube='interpolatedDataCube2'

# Establish building dependencies
Depends('interpolatedDataCube.rsf','multiLayerDataCube.rsf')
Depends('interpolatedDataCube2.rsf','interpolatedDataCube.rsf')
Depends('crsParameters-m0-0-t0-0.rsf','interpolatedDataCube2.rsf')

# Original velocity model
xmax = 6.0
zmax = 4.0

layers = ((1.00,1.20,0.90,1.00),
          (1.85,1.85,1.85,1.85))

velocities = (1.508,
              1.690,
              2.0)

### Modeling ###

# Generate multi layer model
mlmod(interfaces='interfaces',
        dipsfile='interfacesDip',
        modelfile=trueModel,
        xmax=xmax,
        zmax=zmax,
        layers=layers,
        velocities=velocities)

# plot the original velocity model
Result(trueModel,
	'''
	grey color=j scalebar=y label1=Depth unit1=km
	label2=Position unit2=km barlabel=Velocity barunit=km/s
	barreverse=y title="Velocity Model - Plane Interfaces" allpos=yi bias=1.0
	''')

# Generate a modeled data cube
nt=1001
dt=0.004
nm=2
dm=0.025
nh=161
dh=0.025

kinewmod(reflectors='interfaces',
        reflectorsDip='interfacesDip',
        filename='multiLayerDataCube',
        velocities=velocities,
        nt=nt,
        dt=dt,
        ns=nm,
        ds=dm,
        nh=nh,
        dh=dh)

### PEF interpolation ###

# Use default value or pass through command line
# PEF coeficients and PEF Smooth radius
a1=int(ARGUMENTS.get('a1',10))
a2=int(ARGUMENTS.get('a2',2))
rect1=int(ARGUMENTS.get('rect1',50))
rect2=int(ARGUMENTS.get('rect2',2))

# Number of offsets to interpolate
nhi=int(ARGUMENTS.get('nhi',nh))

pef(dataCube=dataCube,
    interpolated='interpolatedDataCube',
    nm=nm,
    dm=dm,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

# Do the PEF interpolation one more time
# to increase the CMP sampling
pef('interpolatedDataCube',
    interpolatedDataCube,
    nm=2*nm,
    dm=dm/2.0,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

### VFSA and CRE Stacking ####

# It uses Very Fast Simulated Aneeling and non hyperbolic CRS
# to get zero offset CRS parameters (RN, RNIP and BETA) from interpolated data cube

# VFSA Parameters
v0 = float(ARGUMENTS.get('v0',1.5))
ot0 = float(ARGUMENTS.get('ot0',1.0))
dt0 = float(ARGUMENTS.get('dt0',0.008))
nt0 = int(ARGUMENTS.get('nt0',251))
om0 = float(ARGUMENTS.get('om0',1.5))
dm0 = float(ARGUMENTS.get('dm0',0.025))
nm0 = int(ARGUMENTS.get('nm0',121))
aperture = int(ARGUMENTS.get('aperture',30))
repeat = int(ARGUMENTS.get('repeat',4))
itmax = int(ARGUMENTS.get('itmax',500))
cds = bool(ARGUMENTS.get('cds',False))

Flow(parametersCube,interpolatedDataCube,
        '''
        vfsacrsnh nm0=%d om0=%g dm0=%g nt0=%d ot0=%g dt0=%g v0=%g repeat=%d itmax=%d verb=y rnmin=2.5 rnmax=10 rnipmin=1.8 rnipmax=5
        '''%(nm0,om0,dm0,nt0,ot0,dt0,v0,repeat,itmax))

Flow('creTrajectories',[interpolatedDataCube,parametersCube],
        '''
        cretrajec param=${SOURCES[1]} nm0=%d om0=%g dm0=%g nt0=%d ot0=%g dt0=%g verb=y 
        '''%(nm0,om0,dm0,nt0,ot0,dt0))

Flow(['cregathers','mhCoordinates'],[interpolatedDataCube,'creTrajectories'],
        '''
        getcregather cremh=${SOURCES[1]} m=${TARGETS[1]} aperture=%d nm0=%g nt0=%g |
        put label1=Time unit1=s label2=Offset unit2=Km label3=t0 unit3=s
        label4=m0 unit4=Km n3=%d d3=%g o3=%g n4=%d d4=%g o4=%g
        ''' % (aperture,nm0,nt0,nt0,dt0,ot0,nm0,dm0,om0))

Flow('cretimecurves',['mhCoordinates',parametersCube],
        '''
        getcretimecurve param=${SOURCES[1]} nm0=%d om0=%g dm0=%g nt0=%d ot0=%g dt0=%g verb=y v0=%g |
        put label1=Offset unit1=Km label2=t0 unit2=s label3=m0 unit3=Km
        n2=%d d2=%g o2=%g n3=%d d3=%g o3=%g
        '''%(nm0,om0,dm0,nt0,ot0,dt0,v0,nt0,dt0,ot0,nm0,dm0,om0))

#Flow('parametersCube2',parametersCube,
#	'''
#	put label2=t0 label3=m0 unit2=Km unit3=Km
#	n2=%d d2=%g o2=%g n3=%d d3=%g o3=%g
#	'''%(nt0,dt0,ot0,nm0,dm0,om0))

#parametersCube='parametersCube2'

Flow(stackedSection,['cregathers','cretimecurves'],
        '''
        crestack aperture=%d verb=y timeCurves=${SOURCES[1]} |
        put label1=t0 unit1=s label2=m0 unit2=Km
        ''' %(aperture))

Result(stackedSection,
	'''
	grey title="Stacked Section"
	''')

### velocity inversion using NIP tomography ###

ni = int(ARGUMENTS.get('ni',1)) # Number of iterations in inversion loop
nit = int(ARGUMENTS.get('nit',100)) # Number of iterations in tomography
nitf = int(ARGUMENTS.get('nitf',2)) # Number of interfaces
model = 'model_0' # Constant velocity model

# Traveltime picking
Flow('pick1.txt',stackedSection,'ipick')
Flow('pick2.txt',stackedSection,'ipick')
Flow('pick.txt','pick1.txt pick2.txt','/usr/bin/cat $SOURCES')

files=['t0s','m0s']
i=1
for f in files:
	Flow(f+'.asc','pick.txt',
	'''
	./ascFormat.sh ${TARGETS} %d
	'''%i)

	Flow(f,f+'.asc','dd type=float form=native | put n2=1 d2=1 o2=0')
	i=i+1

files=['rns','rnips','betas']
i=0
for f in files:
	Flow(f,[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=%d |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]}
	''' %i)
	i=i+1

# Constant velocity model for stereoniptomo
Flow(model,None,
     '''
     spike n1=301 d1=0.01 o1=0 n2=1001 d2=0.01 o2=-2 mag=1.508 |
     put label1=Depth unit1=km label2=Position unit2=km
     ''' )

# Plot the constant velocity model
Plot(model,model,'grey color=j scalebar=y label1=Depth unit1=km label2=Position unit2=km barlabel=Velocity barunit=km/s barreverse=y title="Constant Velocity Model" allpos=y')

# Generate shotsfile and anglefile for NIP sources
Flow('s2','m0s','spike mag=0')

Flow('shotsfile',['s2','m0s'],'rcat ${SOURCES[1]} axis=2 | transp')

Flow('anglefile',[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=2 |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]} beta=y
	''')

# First iteration to get the velocity gradient in z
nipsources = 'nipsources_1'
nipangles = 'nipangles_1'
ray =  'ray_1'
nipsources = 'nipsources_1'
angles = 'angles_1'

# NIP model setup, ray-tracing from acquisition surface to NIP sources
Flow([ray,nipangles],[model,'shotsfile','anglefile','t0s'],
	'''
	nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]}
	''')

# Rotate ray angles in NIP sources positions in 180 degrees
Flow(angles,nipangles,'math output="input-180" | put d1=1 o1=1')
Flow(nipsources,ray,'dd type=float')

for i in range(2):

	velinv = 'modelgz_%d' % i
	gz = 'gz_%d' % i
	Flow([velinv,gz],
		[model,nipsources,angles,'t0s','m0s','rnips','betas'],
		'''
		zgradtomo shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} m0s=${SOURCES[4]} rnips=${SOURCES[5]} betas=${SOURCES[6]} gz=${TARGETS[1]} v0=1.508 nit=%d c0=0.1 temp0=5
		''')

	model = velinv

# NIP model setup before velocity model inversion,
# ray-tracing from acquisition surface to NIP sources
Flow(['raygz','nipanglesgz'],[velinv,'shotsfile','anglefile','t0s'],
        '''
        nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]} | dd type=complex
        ''')

Flow('resultgz','raygz','dd type=float')

# Plot inverted velocity model with NIP sources
Plot('velocityModelgz',velinv,
	'''
	grey color=j scalebar=y barreverse=y bias=1.508 title="Inverted velocity model" barlabel="Velocity" barunit="Km/s" min2=1 max2=5
	''')

Plot('inverted-nipsourcesgz','raygz','sfgraph scalebar=y symbol=+ transp=y yreverse=y max1=3 min1=0 min2=1 max2=5 wanttitle=n wantaxis=n plotcol=7 symbolsz=10')

Plot('inverted-interfacesgz',['velocityModelgz','inverted-nipsourcesgz'],'Overlay')

# Plot original velocity model
Plot('mod1gz',trueModel,
	'''
	put label1=Depth unit1=Km label2=Position unit2=Km |
	grey color=j scalebar=y barreverse=y bias=1.508 title="Original velocity model" barlabel="Velocity" barunit="Km/s" min1=0 max1=3 min2=1 max2=5
	''')

Plot('mod1-imggz',['mod1gz','inverted-nipsourcesgz'],'Overlay')

# Plot result: Inverted and original models side by side
Result('invertedgz',['inverted-interfacesgz','mod1-imggz'],'SideBySideIso')

#layers2 = ((1.0,1.0,1.0,1.2,1.2,1.0,0.9,0.9,1.0,1.0,1.0),
#	(1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8))

#layers2 = ((1.2,1.2,1.2,1.2,1.2,1.0,1.0,1.0,0.9,0.9,0.9),
#	(1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8))

layers2 = ((1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0),
	(1.85,1.85,1.85,1.85,1.85,1.85,1.85,1.85,1.85,1.85,1.85))

# Nodepoints of the cubic spline velocity function
#Flow('sz_0.asc',None,
#	'''
#	echo %s
#	n1=22 d1=1 o1=-2 n2=1 in=$TARGET data_format=ascii_float
#	'''%(' '.join(map(arr2str,layers2))))

#Flow('sz_2','sz_0.asc','dd form=native')

#Flow('sz_2',None,
#	'''
#	math n1=11 d1=1 o1=-2 n2=2 o2=1.0 d2=0.85 output="x2" |
#	put n2=1 n1=22
#	''')

Flow('sz_2',None,
	'''
	math n1=21 d1=0.5 o1=-2 n2=2 o2=1.0 d2=0.85 output="x2" |
	put n2=1 n1=42
	''')

#Flow('sz_1',None,'math n1=11 d1=1 o1=-2 output="1.8"')
#Flow('sz_2',['sz_0','sz_1'],
#	'''
#	rcat ${SOURCES[1]} axis=1 |
#	put n2=1 n1=22 d1=1 o2=-2
#	''')

# Generate multi layers model
mlmod(interfaces='interfaces2',
        dipsfile='interfacesDip2',
        modelfile='mod22',
        xmax=10,
        zmax=3,
        layers=layers2,
        velocities=velocities)

# Plot inverted velocity model with NIP sources
Plot('mod22',
	'''
	put o2=-2 |
	grey color=j scalebar=y barreverse=y bias=1.508 title="Velocity model" barlabel="Velocity" barunit="Km/s" min2=1.5 max2=4.5
	''')

sv='sv_2'

# Layer's velocity
Flow(sv,None,
	'''
	spike nsp=3 mag=%s k1=1,2,3 n1=3
	'''%('1.508,1.72,2.0'))

# Initial time misfit for inversion
Flow('misfit_1',None,'spike nsp=1 mag=0 k1=1 n1=1')

models = []
misfit = []
sz='sz_2'
t0s='t0s'
m0s='m0s'
betas='betas'
rnips='rnips'
shotsfile='shotsfile'
anglefile='anglefile'
for j in range(nitf):

	model = velinv
	misfit.append('misfit_1')
	mis='misfit_1'

	for i in range(2,ni+2,1):

		velinv = 'model_%d_%d' % (i,j)
		misinv = 'misfit_%d_%d' % (i,j)
		models.append(velinv)
		misfit.append(misinv)
		vspline = 'vspline_%d_%d' % (i,j)
		zspline = 'zspline_%d_%d' % (i,j)
		nipangles = 'nipangles_%d_%d' % (i,j)
		ray =  'ray_%d_%d' % (i,j)
		nipsources = 'nipsources_%d_%d' % (i,j)
		angles = 'angles_%d_%d' % (i,j)
		t0sout = 't0sout_%d_%d' % (i,j)
		m0sout = 'm0sout_%d_%d' % (i,j)
		rnipsout = 'rnipsout_%d_%d' % (i,j)
		betasout = 'betasout_%d_%d' % (i,j)
		shotsout = 'shotsout_%d_%d' % (i,j)
		anglesout = 'anglesout_%d_%d' % (i,j)

		# NIP model setup, ray-tracing from acquisition surface to NIP sources
		Flow([ray,nipangles],[model,shotsfile,anglefile,t0s],
			'''
			nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]}
			''')

		# Rotate ray angles in NIP sources positions in 180 degrees
		Flow(angles,nipangles,'math output="input+180"')
		Flow(nipsources,ray,'dd type=float')

		# forward modeling
		# do a ray-tracing from NIP sources to acquisition surface and measure traveltime
		Flow([velinv,zspline,vspline,misinv,t0sout,m0sout,rnipsout,betasout,shotsout,anglesout],
		[model,nipsources,angles,t0s,m0s,
		rnips,betas,sz,sv,mis,interpolatedDataCube],
		    '''
		    landa88tomo shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} m0s=${SOURCES[4]} rnips=${SOURCES[5]} betas=${SOURCES[6]} sz=${SOURCES[7]} vz=${SOURCES[8]} zspline=${TARGETS[1]} vspline=${TARGETS[2]} misfit=${SOURCES[9]} misinv=${TARGETS[3]} data=${SOURCES[10]} v0=1.508 nit=%d c0=0.1 temp0=5 itf=%d t0sout=${TARGETS[4]} m0sout=${TARGETS[5]} rnipsout=${TARGETS[6]} betasout=${TARGETS[7]} shotsout=${TARGETS[8]} anglesout=${TARGETS[9]}
		    ''' % (nit,j))

		model = velinv
		sz = zspline
		sv = vspline
		mis = misinv
		t0s = t0sout
		m0s = m0sout
		rnips = rnipsout
		betas = betasout
		shotsfile = shotsout
		anglefile = anglesout 

# NIP model setup after velocity model inversion,
# ray-tracing from acquisition surface to NIP sources
Flow(['ray2','nipangles2'],[velinv,shotsout,anglesout,t0sout],
        '''
        nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]} | dd type=complex
        ''')

Flow('result','ray2','sfdd type=float')

# Plot inverted velocity model with NIP sources
Plot('velocityModel',velinv,
	'''
	grey color=j scalebar=y barreverse=y bias=1.508 title="Inverted velocity model" barlabel="Velocity" barunit="Km/s" min2=1.5 max2=4.5
	''')

Plot('inverted-nipsources','ray2','sfgraph scalebar=y symbol=+ transp=y yreverse=y max1=3 min1=0 min2=1.5 max2=4.5 wanttitle=n wantaxis=n plotcol=7 symbolsz=10')

Plot('inverted-interfaces',['velocityModel','inverted-nipsources'],'Overlay')

# Plot original velocity model
Plot('mod1',trueModel,
	'''
	put label1=Depth unit1=Km label2=Position unit2=Km |
	grey color=j scalebar=y barreverse=y bias=1.508 title="Original velocity model" barlabel="Velocity" barunit="Km/s" min1=0 max1=3 min2=1.5 max2=4.5
	''')

Plot('mod1-img',['mod1','inverted-nipsources'],'Overlay')

# Plot result: Inverted and original models side by side
Result('inverted-original',['inverted-interfaces','mod1-img'],'SideBySideIso')

Flow('models',models,'rcat axis=3 ${SOURCES[0:%d]}'%(ni*nitf))

Plot('models',
	'''
	put label3=Model unit3=index |
	grey color=j scalebar=y barreverse=y bias=1.508 title="Velocity models" barlabel="Velocity" barunit="Km/s" min1=0 max1=3 min2=1.5 max2=4.5
	''')

# Plot misfit values for each iteration
Flow('misfitvar',misfit,'rcat axis=1 ${SOURCES[0:%d]}'%(ni*nitf))

Plot('misfitvar',
	'''
	put label1=Iteration unit1=index label2=Misfit n2=1 d1=1 |
	graph title="Misfit variation"
	''')

End()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Madagascar Script)
# 
# Purpose: Finite differences modeling for a lateral velocity variation layer.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 13/10/2021
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

from rsf.proj import *
import math

def arr2str(array,sep=' '):
        '''
        
        Convert a tuple into a comma separeted string
        
        :param array: tuple to be converted
        '''
        return sep.join(map(str,array))

# ------------------------------------------------------------
# Wave Equation Modeling
# ------------------------------------------------------------
##################################
# Create Velocity Model
##################################

layer1 = ((0.9,1.00,1.20,0.90,1.00,1.00),)
layer2 = ((1.85,1.85,1.85,1.85,1.85,1.85),)

# Constant velocity model
Flow('model',None,
     '''
     spike n1=1401 d1=0.01 o1=0 n2=1001 d2=0.01 o2=0 mag=1.508 |
     put label1=Depth unit1=km label2=Position unit2=km
     ''' )

# Points of the cubic spline representation of the interfaces
Flow('sza.asc',None,
	'''
	echo %s
	n1=5 o1=0 d1=2.5
	data_format=ascii_float in=$TARGET
	''' % (' '.join(map(arr2str,layer1))))

Flow('sza','sza.asc','dd form=native')

Flow('szb.asc',None,
	'''
	echo %s
	n1=5 o1=0 d1=2.5
	data_format=ascii_float in=$TARGET
	''' % (' '.join(map(arr2str,layer2))))

Flow('szb','szb.asc','dd form=native')

Flow('sz_2',['sza','szb'],
	'''
	rcat ${SOURCES[1]} axis=1 |
        put n1=10
	''')

sz='sz_2'

# Layer's velocities
sv='sv_2'
Flow(sv,None,
	'''
	spike nsp=3 mag=%s k1=1,2,3 n1=3
	'''%('1.5,1.7,2.0'))

Flow('mod2',['model','sz_2','sv_2'],
	'''
	buildmodel sz=${SOURCES[1]} vz=${SOURCES[2]}
	''')

Result('mod2','grey title="Velocity model center" color=j scalebar=y barreverse=y barunit=Km/s label1=Depth label2=Distance unit1=Km unit2=Km barlabel=Velocity allpos=y bias=1.5')

Result('splinevellayer','mod2',
	'''
	window n1=1 f1=150 | graph label1=Distance label2=Velocity title="Velocity variation - Second layer"
	''')

# left border
Flow('left-border','mod2',
	'''
	window n2=1 f2=0 |
	spray n=2001 d=0.01 o=0
	''')

# right border
Flow('right-border','mod2',
	'''
	window n2=1 f2=1000 |
	spray n=2001 d=0.01 o=0
	''')

Flow('fullmodel',['left-border','mod2','right-border'],
	'''
	rcat ${SOURCES[1:3]} axis=2
	''')

Result('fullmodel','grey title="Velocity model" color=j scalebar=y barreverse=y barunit=Km/s label1=Depth label2=Distance unit1=Km unit2=Km barlabel=Velocity allpos=y bias=1.5')

##################################
# Set up sources and receivers 
##################################

Flow('r',None,'spike n1=100 d1=0.025 o1=27.250')
Flow('rz','r','math output=0.01')
Flow('rx','r','math output=x1')
Flow('rxz','rx rz','cat axis=2 ${SOURCES[1]} | transp') 

Flow('sz','fullmodel','window n1=1 j2=20 | math output=0')
Flow('sx','fullmodel','window n1=1 j2=20 | math output=x1')
Flow('sy','fullmodel','window n1=1 j2=20 | math output=0.1')
Flow('sxz',['sx','sz','sy'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)

Flow('wavelet',None,
     '''
     spike nsp=1 n1=5000 d1=0.001 k1=201 |
     ricker1 frequency=10 | transp  
     ''' )

z=0
ns=int(ARGUMENTS.get('ns',1))
x0=28.5

##################################
# Modeling 
##################################

data = []
for i in range(ns):
	x=x0+i*0.025
	sourcexz='sxz'+str(x)
	receiverxz='rxz'+str(x)
	Flow(sourcexz,None,
	 'spike n1=3 nsp=3 k1=1,2,3 mag=%g,%g,1' % (x,z))
	Flow(receiverxz,['rx','rz'],
	'''
	math output="input+%g" |
	rcat axis=2 ${SOURCES[1]} |
	transp |
	put o1=%g unit1=Km
	'''%((0.025*i),(x-50*0.025)))

	datax='data'+str(x)
	wfl='wfl'+str(x)
	snap='snap'+str(x)

	Flow([datax,wfl],['wavelet','fullmodel','fullmodel',sourcexz,receiverxz],
	 '''
	 awefd2d
	 ompchunk=1 ompnth=0 
	 verb=y snap=y jsnap=100
	 nb=0
	 vel=${SOURCES[1]}
	 den=${SOURCES[2]}
	 sou=${SOURCES[3]}
	 rec=${SOURCES[4]}
	 wfl=${TARGETS[1]}
	 cden=y free=n dens=n snap=y expl=y |
	 put label1=Offset n3=1 d3=0.025 o3=%g o1=%g |
	 transp plane=21 |
	 mutter v0=1.8 t0=0.3
	 '''%(x,-50*0.025))
	data.append(datax)

Flow('data',data,'rcat ${SOURCES[1:%d]} axis=3'%ns)

##################################
# Display shot gather and snapshot
##################################    

for i in range(ns):
	x=x0+i*0.025
	dataview='data'+str(x)
	Result(dataview,
	   '''
	   grey title="Shot gather xs=%2.3f (km)"
	   gainpanel=all 
	   label1=Time unit1=s label2=Position unit2=km
	   ''' % (x))

Flow('cmpdata cmpmask','data',
	'''
	shot2cmp mask=${TARGETS[1]}
	''')

Flow('scan','cmpdata cmpmask',
	'''
	vscan semblance=y mask=${SOURCES[1]}
	v0=1.4 dv=0.05 nv=100
	''')

Flow('pick','scan',
	'''
	pick rect1=50 rect2=100 vel0=1.4 |
	window
	''')

Flow('nmo','cmpdata cmpmask pick',
	'''
	nmo mask=${SOURCES[1]} velocity=${SOURCES[2]}
	''')

Flow('stack','nmo','stack')

dt=0.004
Flow('vrms','pick',
             '''
             sfmul $SOURCE | 
             sfcausint |
             sfmath output="sqrt(input*%g/(x1+%g))" |
             sfput n3=1 d3=1 o3=0 
             '''%(dt,dt))

Flow('kirchhoffMigrated',['stack','vrms'],
        '''
        kirchnew velocity=${SOURCES[1]} |
        pow pow1=2
        ''')

Result('kirchhoffMigrated','grey title="Kirchhoff Migrated Section"')

End()

/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_blas_h
#define _sf_blas_h


#ifndef NO_BLAS


#ifdef __APPLE__
#define VIMAGE_H
/* #define __VECLIB__ */
#include <Accelerate/Accelerate.h>
#else
#ifdef HAVE_MKL
#include <mkl.h>
#else
#include <cblas.h>
#endif


#ifdef __sgi


double cblas_dsdot(int n, const float *x, int sx, const float *y, int sy);
/*< x'y float -> double >*/


#endif


#endif


#else


void cblas_saxpy(int n, float a, const float *x, int sx, float *y, int sy);
/*< y += a*x >*/


void cblas_sswap(int n, float *x, int sx, float* y, int sy);
/*< swap x and y >*/


float cblas_sdot(int n, const float *x, int sx, const float *y, int sy);
/*< x'y float -> complex >*/


double cblas_dsdot(int n, const float *x, int sx, const float *y, int sy);
/*< x'y float -> complex >*/


float cblas_snrm2 (int n, const float* x, int sx);
/*< sum x_i^2 >*/


float cblas_scnrm2 (int n, const void* x, int sx);
/*< sum |x_i|^2 >*/


void cblas_sscal(int n, float alpha, float *x, int sx);
/*< x = alpha*x >*/


void cblas_csscal(int n, float alpha, void *x, int sx);
/*< x = alpha*x >*/


void cblas_cdotc_sub(int n, 
		     const void *x, int sx,
		     const void *y, int sy, void *dot);
/*< complex hermitian dot product >*/


#endif

#endif

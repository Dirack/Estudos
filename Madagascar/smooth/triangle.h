/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_triangle_h
#define _sf_triangle_h


#include "_bool.h"


typedef struct sf_Triangle *sf_triangle;
/* abstract data type */


sf_triangle sf_triangle_init (int  nbox /* triangle length */, 
			      int  ndat /* data length */,
                              bool box  /* if box instead of triangle */);
/*< initialize >*/


void sf_smooth (sf_triangle tr  /* smoothing object */, 
		int o, int d    /* trace sampling */, 
		bool der        /* if derivative */, 
		float *x        /* data (smoothed in place) */);
/*< apply triangle smoothing >*/


void sf_dsmooth (sf_triangle tr  /* smoothing object */, 
		int o, int d    /* trace sampling */, 
		bool der        /* if derivative */, 
		float *x        /* data (smoothed in place) */);
/*< apply triangle smoothing >*/


void sf_smooth2 (sf_triangle tr  /* smoothing object */, 
		 int o, int d    /* trace sampling */, 
		 bool der        /* if derivative */,
		 float *x        /* data (smoothed in place) */);
/*< apply adjoint triangle smoothing >*/


void sf_dsmooth2 (sf_triangle tr  /* smoothing object */, 
		 int o, int d    /* trace sampling */, 
		 bool der        /* if derivative */,
		 float *x        /* data (smoothed in place) */);
/*< apply adjoint triangle smoothing >*/


void  sf_triangle_close(sf_triangle tr);
/*< free allocated storage >*/

#endif
